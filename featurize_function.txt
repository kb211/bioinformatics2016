def transformData(model=None, model_file=None, pam_audit=True, length_audit=False, learn_options_override=None):
    
    data = pandas.DataFrame.from_csv(os.path.dirname(os.path.abspath(__file__)) + '/azimuth/data/FC_plus_RES_withPredictions.csv')
    allinputs = []
    iterations = 0
    for row in data.iterrows():
        seq = np.array([row[1]['30mer']])
        aa_cut = np.array([row[1]['Amino Acid Cut position']]) 
        percent_peptide = np.array([row[1]['Percent Peptide']])
        target = percent_peptide = np.array([row[1]['score_drug_gene_rank']])
        """
        if pam_audit==False, then it will not check for GG in the expected position
        this is useful if predicting on PAM mismatches, such as with off-target
        """
        # assert not (model is None and model_file is None), "you have to specify either a model or a model_file"
        assert isinstance(seq, (np.ndarray)), "Please ensure seq is a numpy array"
        assert len(seq[0]) > 0, "Make sure that seq is not empty"
        assert isinstance(seq[0], basestring), "Please ensure input sequences are in string format, i.e. 'AGAG' rather than ['A' 'G' 'A' 'G'] or alternate representations"
    
        if aa_cut is not None:
            assert len(aa_cut) > 0, "Make sure that aa_cut is not empty"
            assert isinstance(aa_cut, (np.ndarray)), "Please ensure aa_cut is a numpy array"
            assert np.all(np.isreal(aa_cut)), "amino-acid cut position needs to be a real number"
    
        if percent_peptide is not None:
            assert len(percent_peptide) > 0, "Make sure that percent_peptide is not empty"
            assert isinstance(percent_peptide, (np.ndarray)), "Please ensure percent_peptide is a numpy array"
            assert np.all(np.isreal(percent_peptide)), "percent_peptide needs to be a real number"
    
    
        if model_file is None:
            azimuth_saved_model_dir = os.path.join(os.path.dirname(azimuth.__file__), 'saved_models')
            if np.any(percent_peptide == -1) or (percent_peptide is None and aa_cut is None):
                print("No model file specified, using V3_model_nopos")
                model_name = 'V3_model_nopos.pickle'
            else:
                print("No model file specified, using V3_model_full")
                model_name = 'V3_model_full.pickle'
    
            model_file = os.path.join(azimuth_saved_model_dir, model_name)
        if iterations == 0:
            if model is None:
                with open(model_file, 'rb') as f:
                    model, learn_options = pickle.load(f)
            else:
                model, learn_options = model
                
            learn_options["V"] = 2
        
            learn_options = override_learn_options(learn_options_override, learn_options)
    
        # Y, feature_sets, target_genes, learn_options, num_proc = setup(test=False, order=2, learn_options=learn_options, data_file=test_filename)
        # inputs, dim, dimsum, feature_names = pd.concatenate_feature_sets(feature_sets)
    
        Xdf = pandas.DataFrame(columns=[u'30mer', u'Strand'], data=zip(seq, ['NA' for x in range(len(seq))]))
    
        if np.all(percent_peptide != -1) and (percent_peptide is not None and aa_cut is not None):
            gene_position = pandas.DataFrame(columns=[u'Percent Peptide', u'Amino Acid Cut position'], data=zip(percent_peptide, aa_cut))
        else:
            gene_position = pandas.DataFrame(columns=[u'Percent Peptide', u'Amino Acid Cut position'], data=zip(np.ones(seq.shape[0])*-1, np.ones(seq.shape[0])*-1))
    
        feature_sets = feat.featurize_data(Xdf, learn_options, pandas.DataFrame(), gene_position, pam_audit=pam_audit, length_audit=length_audit)
        inputs, dim, dimsum, feature_names = azimuth.util.concatenate_feature_sets(feature_sets)

        inputs = np.append(inputs[0], target, axis=0)
        allinputs.append(inputs)
        
        iterations+=1
    
    feature_names.append('score_drug_gene_rank')
    allinputs = pandas.DataFrame(data=allinputs,columns=feature_names)
    outfile = os.path.dirname(os.path.abspath(__file__)) + '/featurized_data.csv'
    allinputs.to_csv(outfile)
